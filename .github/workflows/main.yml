# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    tags: ['v*.*.*']
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it        
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{secrets.ACCESS_TOKEN}}
              
      - name: Check Keystore
        run: |
             cd keystore
             ls
             
      - name: Setup Java JDK
        uses: actions/setup-java@v2.2.0
        with:
          java-version: 11
          distribution: 'temurin'
          
      - name: Build release APK
        run: bash ./gradlew assembleRelease --stacktrace

      - name: Get APK Name
        id: getfilename
        run: |
            cd app/build/outputs/apk/release/
            echo "::set-output name=apk_filename::$(ls -r *.apk | head -n 1)"
            
      - name: Log Apk Name
        run: echo "The apk is ${{ steps.getfilename.outputs.apk_filename}}"
        
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: app/build/outputs/apk/release/${{steps.getfilename.outputs.apk_filename}}
          retention-days: 7
          
  deploy:
    # The type of runner that the job will run on
      runs-on: ubuntu-latest
      needs: build
      if: contains(github.ref, 'tags/')
      steps:
      - name: Prepare Release
        id: prepare_release
        run: |
          TAG_NAME=`echo $GITHUB_REF | cut -d / -f3`
          echo ::set-output name=tag_name::$TAG_NAME
      - name: Download build result for job apk
        if: steps.prepare_release.outputs.tag_name
        uses: actions/download-artifact@v2
        with:
          name: artifact
          
      # 上传到oos  
      - name: Setup Oss
        uses: manyuanrong/setup-ossutil@v2.0
        with:
          # 填写Bucket所在地域的域名信息，可参考访问域名和数据中心。
          endpoint: oss-cn-shanghai.aliyuncs.com	
          # AccessKey I
          access-key-id: ${{secrets.RELEASE_BUCKET_ACCESSKEYID}}
          # AccessKeySceret
          access-key-secret:  ${{secrets.RELEASE_BUCKET_ACCESSKEYSECRET}}
      - run: ossutil cp -rf app/build/outputs/apk/release/${{steps.getfilename.outputs.apk_filename}} oss://troncell-releases/AppPod/Android/
        
      # 创建Release  
      - name: Create Release
        id: create_release
        if: steps.prepare_release.outputs.tag_name
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.prepare_release.outputs.tag_name}}
          release_name: Release ${{steps.prepare_release.outputs.tag_name}} 
          draft: false
          prerelease: false
          body: 点击下载 [${{steps.getfilename.outputs.apk_filename}}](https://releases.sensingstore.com/AppPod/Android/${{steps.getfilename.outputs.apk_filename}})

      
      - name: The job has success
        if: ${{ success() }}
        run:  |
             curl '${{ secrets.DINGTALK_WEBHOOK}}' \
             -H 'Content-Type: application/json' \
             -d '{"msgtype": "link","link": {"text": "${{steps.getfilename.outputs.apk_filename}} 发布", "title": "DevOps,信息发布系统",  "messageUrl": "https://releases.sensingstore.com/AppPod/Android/${{steps.getfilename.outputs.apk_filename}}" }}'

      
      - name: The job has failed
        if: ${{ failure() }}
        run:  |
             curl '${{ secrets.DINGTALK_WEBHOOK}}' \
             -H 'Content-Type: application/json' \
             -d '{"msgtype": "text","text": {"content":"DevOps,信息发布系统 ${{ github.repository }} Failed"}}'
        
